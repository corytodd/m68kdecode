> move.b d0,d1
# Instruction { size: 1, operation: MOVE, operands: [ DR(D0), DR(D1) ], extra: NoExtra }

> move.b d2,d3
# Instruction { size: 1, operation: MOVE, operands: [ DR(D2), DR(D3) ], extra: NoExtra }

> move.b d4,d5
# Instruction { size: 1, operation: MOVE, operands: [ DR(D4), DR(D5) ], extra: NoExtra }

> move.b d6,d7
# Instruction { size: 1, operation: MOVE, operands: [ DR(D6), DR(D7) ], extra: NoExtra }

> move.w a0,a1
# Instruction { size: 2, operation: MOVEA, operands: [ AR(A0), AR(A1) ], extra: NoExtra }

> move.w a2,a3
# Instruction { size: 2, operation: MOVEA, operands: [ AR(A2), AR(A3) ], extra: NoExtra }

> move.w a4,a5
# Instruction { size: 2, operation: MOVEA, operands: [ AR(A4), AR(A5) ], extra: NoExtra }

> move.w a6,a7
# Instruction { size: 2, operation: MOVEA, operands: [ AR(A6), AR(A7) ], extra: NoExtra }

> move.b 123(a0,d0),d3 
# Instruction { size: 1, operation: MOVE, operands: [ ARDISP(A0, dr_disp(D0, 123)), DR(D3) ], extra: NoExtra }

> move.w 123(a0,d0),d3 
# Instruction { size: 2, operation: MOVE, operands: [ ARDISP(A0, dr_disp(D0, 123)), DR(D3) ], extra: NoExtra }

> move.l 123(a0,d0),d3 
# Instruction { size: 4, operation: MOVE, operands: [ ARDISP(A0, dr_disp(D0, 123)), DR(D3) ], extra: NoExtra }

> move.l 123(a0,d0),a1 
# Instruction { size: 4, operation: MOVEA, operands: [ ARDISP(A0, dr_disp(D0, 123)), AR(A1) ], extra: NoExtra }

> move.w 123(a0,d0),a1 
# Instruction { size: 2, operation: MOVEA, operands: [ ARDISP(A0, dr_disp(D0, 123)), AR(A1) ], extra: NoExtra }

> move.b #$12,d7 
# Instruction { size: 1, operation: MOVE, operands: [ IMM8(0x12), DR(D7) ], extra: NoExtra }

> move.w #$1234,d7 
# Instruction { size: 2, operation: MOVE, operands: [ IMM16(0x1234), DR(D7) ], extra: NoExtra }

> move.l #$12345678,d7 
# Instruction { size: 4, operation: MOVE, operands: [ IMM32(0x12345678), DR(D7) ], extra: NoExtra }

> move.l D1,-(A2)
# Instruction { size: 4, operation: MOVE, operands: [ DR(D1), ARDEC(A2) ], extra: NoExtra }

> move.l D1,(A2)+
# Instruction { size: 4, operation: MOVE, operands: [ DR(D1), ARINC(A2) ], extra: NoExtra }

> move.l -(A4),(A2)+
# Instruction { size: 4, operation: MOVE, operands: [ ARDEC(A4), ARINC(A2) ], extra: NoExtra }

> move.l 4.w,A0
# Instruction { size: 4, operation: MOVEA, operands: [ ABS16(4), AR(A0) ], extra: NoExtra }

> move.l $11223344,A0
# Instruction { size: 4, operation: MOVEA, operands: [ ABS32(0x11223344), AR(A0) ], extra: NoExtra }

> move.w #$1234,123(d0)
# Instruction {
#   size: 2, operation: MOVE, operands: [ 
#     IMM16(0x1234),
#     DISP(Displacement {
#       base_displacement: 123,
#       outer_displacement: 0,
#       indexer: Indexer::DR(D0, 0),
#       indirection: NoIndirection,
#      })
#    ],
#    extra: NoExtra
#  }

> move.w -8(pc),d3
# Instruction {
#   size: 2, operation: MOVE, operands: [ 
#     PCDISP(2, Displacement {
#       base_displacement: -8,
#       outer_displacement: 0,
#       indexer: Indexer::NoIndexer,
#       indirection: NoIndirection,
#     }),
#     DR(D3),
#   ],
#   extra: NoExtra
# }

> move.w -8(pc,d2*8),d3
# Instruction {
#   size: 2, operation: MOVE, operands: [ 
#     PCDISP(2, Displacement {
#       base_displacement: -8,
#       outer_displacement: 0,
#       indexer: Indexer::DR(D2, 3),
#       indirection: NoIndirection,
#     }),
#     DR(D3),
#   ],
#   extra: NoExtra
# }

> move.w 123(a1,d2*4),9876(a2,d3*2)
# Instruction {
#   size: 2,
#   operation: MOVE,
#   operands: [
#     ARDISP(A1, dr_disp_scale(D2, 123, 2)),
#     ARDISP(A2, dr_disp_scale(D3, 9876, 1))
#   ],
#   extra: NoExtra
# }

> move.w d0,12345(a0,a1*2)
# Instruction {
#   size: 2,
#   operation: MOVE,
#   operands: [
#     DR(D0),
#     ARDISP(A0, Displacement {
#       base_displacement: 12345,
#       outer_displacement: 0,
#       indexer: Indexer::AR(A1, 1),
#       indirection: NoIndirection,
#     })
#   ],
#   extra: NoExtra
# }

> lea (a0),a1
# Instruction { size: 4, operation: LEA, operands: [ ARIND(A0), AR(A1) ], extra: NoExtra }

> lea 8(a0),a1
# Instruction { size: 4, operation: LEA, operands: [ ARDISP(A0, simple_disp(8)), AR(A1) ], extra: NoExtra  }

> ori #17,ccr
# Instruction { size: 1, operation: ORITOCCR, operands: [ IMM8(17), Implied ], extra: NoExtra  }

> ori #$1234,sr
# Instruction { size: 2, operation: ORITOSR, operands: [ IMM16(0x1234), Implied ], extra: NoExtra  }

> ori.w #$1234,d0
# Instruction { size: 2, operation: ORI, operands: [ IMM16(0x1234), DR(D0) ], extra: NoExtra  }

> ori.b #$12,d2
# Instruction { size: 1, operation: ORI, operands: [ IMM8(0x12), DR(D2) ], extra: NoExtra  }

> ori.w #$1234,123(a0,d0)
# Instruction { size: 2, operation: ORI, operands: [ IMM16(0x1234), ARDISP(A0, dr_disp(D0, 123)) ], extra: NoExtra  }

> ori.l #$12345678,-(a0)
# Instruction { size: 4, operation: ORI, operands: [ IMM32(0x12345678), ARDEC(A0) ], extra: NoExtra  }

> andi #17,ccr
# Instruction { size: 1, operation: ANDITOCCR, operands: [ IMM8(17), Implied ], extra: NoExtra  }

> andi #$1234,sr
# Instruction { size: 2, operation: ANDITOSR, operands: [ IMM16(0x1234), Implied ], extra: NoExtra  }

> andi.w #$1234,d0
# Instruction { size: 2, operation: ANDI, operands: [ IMM16(0x1234), DR(D0) ], extra: NoExtra  }

> andi.b #$12,d2
# Instruction { size: 1, operation: ANDI, operands: [ IMM8(0x12), DR(D2) ], extra: NoExtra  }

> andi.w #$1234,123(a0,d0)
# Instruction { size: 2, operation: ANDI, operands: [ IMM16(0x1234), ARDISP(A0, dr_disp(D0, 123)) ], extra: NoExtra  }

> andi.l #$12345678,-(a0)
# Instruction { size: 4, operation: ANDI, operands: [ IMM32(0x12345678), ARDEC(A0) ], extra: NoExtra  }

> eori #17,ccr
# Instruction { size: 1, operation: EORITOCCR, operands: [ IMM8(17), Implied ], extra: NoExtra  }

> eori #$1234,sr
# Instruction { size: 2, operation: EORITOSR, operands: [ IMM16(0x1234), Implied ], extra: NoExtra  }

> eori.w #$1234,d0
# Instruction { size: 2, operation: EORI, operands: [ IMM16(0x1234), DR(D0) ], extra: NoExtra  }

> eori.b #$12,d2
# Instruction { size: 1, operation: EORI, operands: [ IMM8(0x12), DR(D2) ], extra: NoExtra  }

> eori.w #$1234,123(a0,d0)
# Instruction { size: 2, operation: EORI, operands: [ IMM16(0x1234), ARDISP(A0, dr_disp(D0, 123)) ], extra: NoExtra  }

> eori.l #$12345678,-(a0)
# Instruction { size: 4, operation: EORI, operands: [ IMM32(0x12345678), ARDEC(A0) ], extra: NoExtra }

> addi.l #$12345678,-(a0)
# Instruction { size: 4, operation: ADDI, operands: [ IMM32(0x12345678), ARDEC(A0) ], extra: NoExtra }

> subi.l #$12345678,-(a0)
# Instruction { size: 4, operation: SUBI, operands: [ IMM32(0x12345678), ARDEC(A0) ], extra: NoExtra }

> rtm d3
# Instruction { size: 0, operation: RTM, operands: [ DR(D3), NoOperand ], extra: NoExtra }

> rtm a1
# Instruction { size: 0, operation: RTM, operands: [ AR(A1), NoOperand ], extra: NoExtra }

> callm #3,(a1)
# Instruction { size: 0, operation: CALLM, operands: [ IMM8(3), ARIND(A1) ], extra: NoExtra }

> callm #99,$12345678
# Instruction { size: 0, operation: CALLM, operands: [ IMM8(99), ABS32(0x12345678) ], extra: NoExtra }

> cmp2.l (a0),d3
# Instruction { size: 4, operation: CMP2, operands: [ ARIND(A0), DR(D3) ], extra: NoExtra }

> cmp2.b 90(a0,d2),a6
# Instruction { size: 1, operation: CMP2, operands: [ ARDISP(A0, dr_disp(D2, 90)), AR(A6) ], extra: NoExtra }

> chk2.w 90(a0,d2),a6
# Instruction { size: 2, operation: CHK2, operands: [ ARDISP(A0, dr_disp(D2, 90)), AR(A6) ], extra: NoExtra }

> cmpi.b #$a5,90(a0,d2*4)
# Instruction { size: 1, operation: CMPI, operands: [ IMM8(0xa5), ARDISP(A0, dr_disp_scale(D2, 90, 2)) ], extra: NoExtra }

> cmpi.w #$a512,90(a0,d2*4)
# Instruction { size: 2, operation: CMPI, operands: [ IMM16(0xa512), ARDISP(A0, dr_disp_scale(D2, 90, 2)) ], extra: NoExtra }

> cmpi.l #$12345678,90(a0,d2*4)
# Instruction { size: 4, operation: CMPI, operands: [ IMM32(0x12345678), ARDISP(A0, dr_disp_scale(D2, 90, 2)) ], extra: NoExtra }

> btst #18,d0
# Instruction { size: 1, operation: BTST, operands: [ IMM16(18), DR(D0) ], extra: NoExtra }

> btst #18,(a0)+
# Instruction { size: 1, operation: BTST, operands: [ IMM16(18), ARINC(A0) ], extra: NoExtra }

> bclr #18,(a0)+
# Instruction { size: 1, operation: BCLR, operands: [ IMM16(18), ARINC(A0) ], extra: NoExtra }

> bchg #18,(a0)+
# Instruction { size: 1, operation: BCHG, operands: [ IMM16(18), ARINC(A0) ], extra: NoExtra }

> bset #18,(a0)+
# Instruction { size: 1, operation: BSET, operands: [ IMM16(18), ARINC(A0) ], extra: NoExtra }

> moves.l a0,(a1)
# Instruction { size: 4, operation: MOVES, operands: [ AR(A0), ARIND(A1) ], extra: NoExtra }

> moves.b d0,(a1)
# Instruction { size: 1, operation: MOVES, operands: [ DR(D0), ARIND(A1) ], extra: NoExtra }

> cas d0,d1,(a0)
# NotImplemented

> cas2 d0:d1,d2:d3,(a0):(a1)
# NotImplemented

// doesn't work on all CPUs, assembler freaks out
// > bgnd
// # Instruction { size: 0, operation: BGND, operands: [ NoOperand, NoOperand ] }

> illegal
# Instruction { size: 0, operation: ILLEGAL, operands: [ NoOperand, NoOperand ], extra: NoExtra }

> nop
# Instruction { size: 0, operation: NOP, operands: [ NoOperand, NoOperand ], extra: NoExtra }

> reset
# Instruction { size: 0, operation: RESET, operands: [ NoOperand, NoOperand ], extra: NoExtra }

> rtd #578
# Instruction { size: 0, operation: RTD, operands: [ IMM16(578), NoOperand ], extra: NoExtra }

> rte
# Instruction { size: 0, operation: RTE, operands: [ NoOperand, NoOperand ], extra: NoExtra }

> rtr
# Instruction { size: 0, operation: RTR, operands: [ NoOperand, NoOperand ], extra: NoExtra }

> rts
# Instruction { size: 0, operation: RTS, operands: [ NoOperand, NoOperand ], extra: NoExtra }

> stop #123
# Instruction { size: 0, operation: STOP, operands: [ IMM16(123), NoOperand ], extra: NoExtra }

> trapv
# Instruction { size: 0, operation: TRAPV, operands: [ NoOperand, NoOperand ], extra: NoExtra }

> swap d7
# Instruction { size: 0, operation: SWAP, operands: [ DR(D7), NoOperand ], extra: NoExtra }

> bkpt #3
# Instruction { size: 0, operation: BKPT, operands: [ IMM8(3), NoOperand ], extra: NoExtra }

> ext.w d6
# Instruction { size: 2, operation: EXTW, operands: [ DR(D6), NoOperand ], extra: NoExtra }

> ext.l d6
# Instruction { size: 4, operation: EXTL, operands: [ DR(D6), NoOperand ], extra: NoExtra }

> extb.l d6
# Instruction { size: 4, operation: EXTBL, operands: [ DR(D6), NoOperand ], extra: NoExtra }

> link.w a0,#1234
# Instruction { size: 2, operation: LINK, operands: [ AR(A0), IMM16(1234) ], extra: NoExtra }

> link.l a5,#$12345678
# Instruction { size: 4, operation: LINK, operands: [ AR(A5), IMM32(0x12345678) ], extra: NoExtra }

> unlk a2
# Instruction { size: 0, operation: UNLK, operands: [ AR(A2), NoOperand ], extra: NoExtra }

> trap #15
# Instruction { size: 0, operation: TRAP, operands: [ IMM8(15), NoOperand ], extra: NoExtra }

> divs.w (a1)+,d2
# Instruction { size: 2, operation: DIVS, operands: [ ARINC(A1), DR(D2) ], extra: NoExtra }

> divs.l d0,d2
# Instruction { size: 4, operation: DIVSL, operands: [ DR(D0), DR(D2) ], extra: NoExtra }

> divs.l d0,d3:d2
# Instruction { size: 4, operation: DIVSL, operands: [ DR(D0), DPAIR(D2, D3) ], extra: NoExtra }

> divsl.l d0,d3:d2
# Instruction { size: 4, operation: DIVSLL, operands: [ DR(D0), DPAIR(D2, D3) ], extra: NoExtra }

> divu.w (a1)+,d2
# Instruction { size: 2, operation: DIVU, operands: [ ARINC(A1), DR(D2) ], extra: NoExtra }

> divu.l d0,d2
# Instruction { size: 4, operation: DIVUL, operands: [ DR(D0), DR(D2) ], extra: NoExtra }

> divu.l d0,d3:d2
# Instruction { size: 4, operation: DIVUL, operands: [ DR(D0), DPAIR(D2, D3) ], extra: NoExtra }

> divul.l d0,d3:d2
# Instruction { size: 4, operation: DIVULL, operands: [ DR(D0), DPAIR(D2, D3) ], extra: NoExtra }

> jmp (a0)
# Instruction { size: 0, operation: JMP, operands: [ ARIND(A0), NoOperand ], extra: NoExtra }

> jmp $12345678
# Instruction { size: 0, operation: JMP, operands: [ ABS32(0x12345678), NoOperand ], extra: NoExtra }

> jmp 123(pc)
# Instruction {
#   size: 0, operation: JMP, operands: [ 
#     PCDISP(2, Displacement {
#       base_displacement: 123,
#       outer_displacement: 0,
#       indexer: Indexer::NoIndexer,
#       indirection: NoIndirection,
#     }),
#     NoOperand,
#   ],
#   extra: NoExtra,
# }

> jsr (a0)
# Instruction { size: 0, operation: JSR, operands: [ ARIND(A0), NoOperand ], extra: NoExtra }

> jsr $12345678
# Instruction { size: 0, operation: JSR, operands: [ ABS32(0x12345678), NoOperand ], extra: NoExtra }

> jsr 123(pc)
# Instruction {
#   size: 0, operation: JSR, operands: [ 
#     PCDISP(2, Displacement {
#       base_displacement: 123,
#       outer_displacement: 0,
#       indexer: Indexer::NoIndexer,
#       indirection: NoIndirection,
#     }),
#     NoOperand,
#   ],
#   extra: NoExtra,
# }

> muls.w  d0,d1
# Instruction { size: 2, operation: MULS, operands: [ DR(D0), DR(D1) ], extra: NoExtra }

> muls.l  d0,d1
# Instruction { size: 4, operation: MULS, operands: [ DR(D0), DR(D1) ], extra: NoExtra }

> muls.l  d0,d2:d1
# Instruction { size: 4, operation: MULS, operands: [ DR(D0), DPAIR(D1, D2) ], extra: NoExtra }

> mulu.w  d0,d1
# Instruction { size: 2, operation: MULU, operands: [ DR(D0), DR(D1) ], extra: NoExtra }

> mulu.l  d0,d1
# Instruction { size: 4, operation: MULU, operands: [ DR(D0), DR(D1) ], extra: NoExtra }

> mulu.l  d0,d2:d1
# Instruction { size: 4, operation: MULU, operands: [ DR(D0), DPAIR(D1, D2) ], extra: NoExtra }

> nbcd  (a0)+
# Instruction { size: 1, operation: NBCD, operands: [ ARINC(A0), NoOperand ], extra: NoExtra }

> move sr,d0
# Instruction { size: 2, operation: MOVEFROMSR, operands: [ Implied, DR(D0) ], extra: NoExtra }

> move d0,sr
# Instruction { size: 2, operation: MOVETOSR, operands: [ DR(D0), Implied ], extra: NoExtra }

> move a0,usp
# Instruction { size: 4, operation: MOVETOUSP, operands: [ AR(A0), Implied ], extra: NoExtra }

> move usp,a3
# Instruction { size: 4, operation: MOVEFROMUSP, operands: [ Implied, AR(A3) ], extra: NoExtra }

> move d0,ccr
# Instruction { size: 2, operation: MOVETOCCR, operands: [ DR(D0), Implied ], extra: NoExtra }

> move ccr,d0
# Instruction { size: 2, operation: MOVEFROMCCR, operands: [ Implied, DR(D0) ], extra: NoExtra }

> pea (a0)
# Instruction { size: 4, operation: PEA, operands: [ ARIND(A0), Implied ], extra: NoExtra }

> movem.w d0-d4/a0-a2,-(a4)
# Instruction { size: 2, operation: MOVEM, operands: [ REGLIST(0b1111100011100000), ARDEC(A4) ], extra: NoExtra }

> movem.l (a4)+,d0-d4/a0-a2
# Instruction { size: 4, operation: MOVEM, operands: [ ARINC(A4), REGLIST(0b0000011100011111) ], extra: NoExtra }

> clr.b d0
# Instruction { size: 1, operation: CLR, operands: [ Implied, DR(D0) ], extra: NoExtra }

> clr.w (a0)+
# Instruction { size: 2, operation: CLR, operands: [ Implied, ARINC(A0) ], extra: NoExtra }

> clr.l (a4)
# Instruction { size: 4, operation: CLR, operands: [ Implied, ARIND(A4) ], extra: NoExtra }

> neg.b d0
# Instruction { size: 1, operation: NEG, operands: [ Implied, DR(D0) ], extra: NoExtra }

> neg.w (a0)+
# Instruction { size: 2, operation: NEG, operands: [ Implied, ARINC(A0) ], extra: NoExtra }

> neg.l (a4)
# Instruction { size: 4, operation: NEG, operands: [ Implied, ARIND(A4) ], extra: NoExtra }

> negx.b d0
# Instruction { size: 1, operation: NEGX, operands: [ Implied, DR(D0) ], extra: NoExtra }

> negx.w (a0)+
# Instruction { size: 2, operation: NEGX, operands: [ Implied, ARINC(A0) ], extra: NoExtra }

> negx.l (a4)
# Instruction { size: 4, operation: NEGX, operands: [ Implied, ARIND(A4) ], extra: NoExtra }

> not.b d0
# Instruction { size: 1, operation: NOT, operands: [ Implied, DR(D0) ], extra: NoExtra }

> not.w (a0)+
# Instruction { size: 2, operation: NOT, operands: [ Implied, ARINC(A0) ], extra: NoExtra }

> not.l (a4)
# Instruction { size: 4, operation: NOT, operands: [ Implied, ARIND(A4) ], extra: NoExtra }

> tst.b d0
# Instruction { size: 1, operation: TST, operands: [ Implied, DR(D0) ], extra: NoExtra }

> tst.w (a0)+
# Instruction { size: 2, operation: TST, operands: [ Implied, ARINC(A0) ], extra: NoExtra }

> tst.l (a4)
# Instruction { size: 4, operation: TST, operands: [ Implied, ARIND(A4) ], extra: NoExtra }

> chk.w (a4),d2
# Instruction { size: 2, operation: CHK, operands: [ ARIND(A4), DR(D2) ], extra: NoExtra }

> chk.l (a4),d2
# Instruction { size: 4, operation: CHK, operands: [ ARIND(A4), DR(D2) ], extra: NoExtra }

> bfchg (a4){12:7}
# Instruction { size: 0, operation: BFCHG, operands: [ NoOperand, ARIND(A4) ], extra: Bitfield(STATIC(12), STATIC(7)) }

> bfchg (a4){d2:7}
# Instruction { size: 0, operation: BFCHG, operands: [ NoOperand, ARIND(A4) ], extra: Bitfield(DYNAMIC(D2), STATIC(7)) }

> bfchg (a4){d2:d3}
# Instruction { size: 0, operation: BFCHG, operands: [ NoOperand, ARIND(A4) ], extra: Bitfield(DYNAMIC(D2), DYNAMIC(D3)) }

> bfclr (a4){12:7}
# Instruction { size: 0, operation: BFCLR, operands: [ NoOperand, ARIND(A4) ], extra: Bitfield(STATIC(12), STATIC(7)) }

> bfexts (a4){12:7},d1
# Instruction { size: 0, operation: BFEXTS, operands: [ ARIND(A4), DR(D1) ], extra: Bitfield(STATIC(12), STATIC(7)) }

> bfextu (a4){12:7},d1
# Instruction { size: 0, operation: BFEXTU, operands: [ ARIND(A4), DR(D1) ], extra: Bitfield(STATIC(12), STATIC(7)) }

> bfffo (a4){12:7},d1
# Instruction { size: 0, operation: BFFFO, operands: [ ARIND(A4), DR(D1) ], extra: Bitfield(STATIC(12), STATIC(7)) }

> bfins d1,(a4){12:7}
# Instruction { size: 0, operation: BFINS, operands: [ DR(D1), ARIND(A4) ], extra: Bitfield(STATIC(12), STATIC(7)) }

> bfset (a4){12:7}
# Instruction { size: 0, operation: BFSET, operands: [ NoOperand, ARIND(A4) ], extra: Bitfield(STATIC(12), STATIC(7)) }

> bftst (a4){12:7}
# Instruction { size: 0, operation: BFTST, operands: [ NoOperand, ARIND(A4) ], extra: Bitfield(STATIC(12), STATIC(7)) }

> .self: dbf d3,.self
# Instruction { size: 2, operation: DBCC, operands: [ DR(D3), PCDISP(2, simple_disp(-2)) ], extra: Condition(CC_F) }

> .self: dbhi d3,.self
# Instruction { size: 2, operation: DBCC, operands: [ DR(D3), PCDISP(2, simple_disp(-2)) ], extra: Condition(CC_HI) }

> .self: dbls d3,.self
# Instruction { size: 2, operation: DBCC, operands: [ DR(D3), PCDISP(2, simple_disp(-2)) ], extra: Condition(CC_LS) }

> .self: dbcc d3,.self
# Instruction { size: 2, operation: DBCC, operands: [ DR(D3), PCDISP(2, simple_disp(-2)) ], extra: Condition(CC_CC) }

> .self: dbhs d3,.self
# Instruction { size: 2, operation: DBCC, operands: [ DR(D3), PCDISP(2, simple_disp(-2)) ], extra: Condition(CC_CC) }

> .self: dbcs d3,.self
# Instruction { size: 2, operation: DBCC, operands: [ DR(D3), PCDISP(2, simple_disp(-2)) ], extra: Condition(CC_CS) }

> .self: dblo d3,.self
# Instruction { size: 2, operation: DBCC, operands: [ DR(D3), PCDISP(2, simple_disp(-2)) ], extra: Condition(CC_CS) }

> .self: dbne d3,.self
# Instruction { size: 2, operation: DBCC, operands: [ DR(D3), PCDISP(2, simple_disp(-2)) ], extra: Condition(CC_NE) }

> .self: dbeq d3,.self
# Instruction { size: 2, operation: DBCC, operands: [ DR(D3), PCDISP(2, simple_disp(-2)) ], extra: Condition(CC_EQ) }

> .self: dbvc d3,.self
# Instruction { size: 2, operation: DBCC, operands: [ DR(D3), PCDISP(2, simple_disp(-2)) ], extra: Condition(CC_VC) }

> .self: dbvs d3,.self
# Instruction { size: 2, operation: DBCC, operands: [ DR(D3), PCDISP(2, simple_disp(-2)) ], extra: Condition(CC_VS) }

> .self: dbpl d3,.self
# Instruction { size: 2, operation: DBCC, operands: [ DR(D3), PCDISP(2, simple_disp(-2)) ], extra: Condition(CC_PL) }

> .self: dbmi d3,.self
# Instruction { size: 2, operation: DBCC, operands: [ DR(D3), PCDISP(2, simple_disp(-2)) ], extra: Condition(CC_MI) }

> .self: dbge d3,.self
# Instruction { size: 2, operation: DBCC, operands: [ DR(D3), PCDISP(2, simple_disp(-2)) ], extra: Condition(CC_GE) }

> .self: dblt d3,.self
# Instruction { size: 2, operation: DBCC, operands: [ DR(D3), PCDISP(2, simple_disp(-2)) ], extra: Condition(CC_LT) }

> .self: dbgt d3,.self
# Instruction { size: 2, operation: DBCC, operands: [ DR(D3), PCDISP(2, simple_disp(-2)) ], extra: Condition(CC_GT) }

> .self: dble d3,.self
# Instruction { size: 2, operation: DBCC, operands: [ DR(D3), PCDISP(2, simple_disp(-2)) ], extra: Condition(CC_LE) }

> addq.b #1,d0
# Instruction { size: 1, operation: ADDQ, operands: [ IMM8(1), DR(D0) ], extra: NoExtra }

> addq.w #7,a0
# Instruction { size: 2, operation: ADDQ, operands: [ IMM8(7), AR(A0) ], extra: NoExtra }

> addq.l #8,d0
# Instruction { size: 4, operation: ADDQ, operands: [ IMM8(8), DR(D0) ], extra: NoExtra }

> subq.b #1,d0
# Instruction { size: 1, operation: SUBQ, operands: [ IMM8(1), DR(D0) ], extra: NoExtra }

> subq.w #7,a0
# Instruction { size: 2, operation: SUBQ, operands: [ IMM8(7), AR(A0) ], extra: NoExtra }

> subq.l #8,d0
# Instruction { size: 4, operation: SUBQ, operands: [ IMM8(8), DR(D0) ], extra: NoExtra }

> trapne
# Instruction { size: 0, operation: TRAPCC, operands: [ NoOperand, NoOperand ], extra: Condition(CC_NE) }

> trapne.w #1234
# Instruction { size: 2, operation: TRAPCC, operands: [ IMM16(1234), NoOperand ], extra: Condition(CC_NE) }

> trapne.l #$12345678
# Instruction { size: 4, operation: TRAPCC, operands: [ IMM32(0x12345678), NoOperand ], extra: Condition(CC_NE) }

> sne (a0)
# Instruction { size: 1, operation: SCC, operands: [ Implied, ARIND(A0) ], extra: Condition(CC_NE) }

> addx.b d0,d1
# Instruction { size: 1, operation: ADDX, operands: [ DR(D0), DR(D1) ], extra: NoExtra }

> addx.w d0,d1
# Instruction { size: 2, operation: ADDX, operands: [ DR(D0), DR(D1) ], extra: NoExtra }

> addx.l d0,d1
# Instruction { size: 4, operation: ADDX, operands: [ DR(D0), DR(D1) ], extra: NoExtra }

> addx.b -(a2),-(a3)
# Instruction { size: 1, operation: ADDX, operands: [ ARDEC(A2), ARDEC(A3) ], extra: NoExtra }

> addx.w -(a2),-(a3)
# Instruction { size: 2, operation: ADDX, operands: [ ARDEC(A2), ARDEC(A3) ], extra: NoExtra }

> addx.l -(a2),-(a3)
# Instruction { size: 4, operation: ADDX, operands: [ ARDEC(A2), ARDEC(A3) ], extra: NoExtra }

> add.b (a2),d0
# Instruction { size: 1, operation: ADD, operands: [ ARIND(A2), DR(D0) ], extra: NoExtra }

> add.w (a2),d0
# Instruction { size: 2, operation: ADD, operands: [ ARIND(A2), DR(D0) ], extra: NoExtra }

> add.l (a2),d0
# Instruction { size: 4, operation: ADD, operands: [ ARIND(A2), DR(D0) ], extra: NoExtra }

> add.b d3,(a2)
# Instruction { size: 1, operation: ADD, operands: [ DR(D3), ARIND(A2) ], extra: NoExtra }

> add.w d3,(a2)
# Instruction { size: 2, operation: ADD, operands: [ DR(D3), ARIND(A2) ], extra: NoExtra }

> add.l d3,(a2)
# Instruction { size: 4, operation: ADD, operands: [ DR(D3), ARIND(A2) ], extra: NoExtra }

> subx.b d0,d1
# Instruction { size: 1, operation: SUBX, operands: [ DR(D0), DR(D1) ], extra: NoExtra }

> subx.w d0,d1
# Instruction { size: 2, operation: SUBX, operands: [ DR(D0), DR(D1) ], extra: NoExtra }

> subx.l d0,d1
# Instruction { size: 4, operation: SUBX, operands: [ DR(D0), DR(D1) ], extra: NoExtra }

> subx.b -(a2),-(a3)
# Instruction { size: 1, operation: SUBX, operands: [ ARDEC(A2), ARDEC(A3) ], extra: NoExtra }

> subx.w -(a2),-(a3)
# Instruction { size: 2, operation: SUBX, operands: [ ARDEC(A2), ARDEC(A3) ], extra: NoExtra }

> subx.l -(a2),-(a3)
# Instruction { size: 4, operation: SUBX, operands: [ ARDEC(A2), ARDEC(A3) ], extra: NoExtra }

> sub.b (a2),d0
# Instruction { size: 1, operation: SUB, operands: [ ARIND(A2), DR(D0) ], extra: NoExtra }

> sub.w (a2),d0
# Instruction { size: 2, operation: SUB, operands: [ ARIND(A2), DR(D0) ], extra: NoExtra }

> sub.l (a2),d0
# Instruction { size: 4, operation: SUB, operands: [ ARIND(A2), DR(D0) ], extra: NoExtra }

> sub.b d3,(a2)
# Instruction { size: 1, operation: SUB, operands: [ DR(D3), ARIND(A2) ], extra: NoExtra }

> sub.w d3,(a2)
# Instruction { size: 2, operation: SUB, operands: [ DR(D3), ARIND(A2) ], extra: NoExtra }

> sub.l d3,(a2)
# Instruction { size: 4, operation: SUB, operands: [ DR(D3), ARIND(A2) ], extra: NoExtra }

> cmpa.w (a1),a2
# Instruction { size: 2, operation: CMPA, operands: [ ARIND(A1), AR(A2) ], extra: NoExtra }

> cmpa.l (a1),a2
# Instruction { size: 4, operation: CMPA, operands: [ ARIND(A1), AR(A2) ], extra: NoExtra }

> cmpm.b (a0)+,(a2)+
# Instruction { size: 1, operation: CMPM, operands: [ ARINC(A0), ARINC(A2) ], extra: NoExtra }

> cmpm.w (a0)+,(a2)+
# Instruction { size: 2, operation: CMPM, operands: [ ARINC(A0), ARINC(A2) ], extra: NoExtra }

> cmpm.l (a0)+,(a2)+
# Instruction { size: 4, operation: CMPM, operands: [ ARINC(A0), ARINC(A2) ], extra: NoExtra }

> cmp.b (a0)+,d7
# Instruction { size: 1, operation: CMP, operands: [ ARINC(A0), DR(D7) ], extra: NoExtra }

> cmp.w (a0)+,d7
# Instruction { size: 2, operation: CMP, operands: [ ARINC(A0), DR(D7) ], extra: NoExtra }

> cmp.l (a0)+,d7
# Instruction { size: 4, operation: CMP, operands: [ ARINC(A0), DR(D7) ], extra: NoExtra }

> eor.b d7,(a0)+
# Instruction { size: 1, operation: EOR, operands: [ DR(D7), ARINC(A0) ], extra: NoExtra }

> eor.w d7,(a0)+
# Instruction { size: 2, operation: EOR, operands: [ DR(D7), ARINC(A0) ], extra: NoExtra }

> eor.l d7,-(a0)
# Instruction { size: 4, operation: EOR, operands: [ DR(D7), ARDEC(A0) ], extra: NoExtra }

> lab:
>   bra.s lab
# Instruction { size: 1, operation: BRA, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: NoExtra }

> lab:
>   bra.w lab
# Instruction { size: 2, operation: BRA, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: NoExtra }

> lab:
>   bra.l lab
# Instruction { size: 4, operation: BRA, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: NoExtra }

> lab:
>   bsr.s lab
# Instruction { size: 1, operation: BSR, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: NoExtra }

> lab:
>   bsr.w lab
# Instruction { size: 2, operation: BSR, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: NoExtra }

> lab:
>   bsr.l lab
# Instruction { size: 4, operation: BSR, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: NoExtra }

> lab:
>   bne.s lab
# Instruction { size: 1, operation: BCC, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: Condition(CC_NE), }

> lab:
>   beq.w lab
# Instruction { size: 2, operation: BCC, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: Condition(CC_EQ) }

> lab:
>   bcs.l lab
# Instruction { size: 4, operation: BCC, operands: [ PCDISP(2, simple_disp(-2)), NoOperand ], extra: Condition(CC_CS) }
