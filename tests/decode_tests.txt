> move.b d0,d1
# Instruction { size: 1, operation: MOVE, operands: [ DR(D0), DR(D1) ] }

> move.b d2,d3
# Instruction { size: 1, operation: MOVE, operands: [ DR(D2), DR(D3) ] }

> move.b d4,d5
# Instruction { size: 1, operation: MOVE, operands: [ DR(D4), DR(D5) ] }

> move.b d6,d7
# Instruction { size: 1, operation: MOVE, operands: [ DR(D6), DR(D7) ] }

> move.w a0,a1
# Instruction { size: 2, operation: MOVEA, operands: [ AR(A0), AR(A1) ] }

> move.w a2,a3
# Instruction { size: 2, operation: MOVEA, operands: [ AR(A2), AR(A3) ] }

> move.w a4,a5
# Instruction { size: 2, operation: MOVEA, operands: [ AR(A4), AR(A5) ] }

> move.w a6,a7
# Instruction { size: 2, operation: MOVEA, operands: [ AR(A6), AR(A7) ] }

> move.b 123(a0,d0),d3 
# Instruction { size: 1, operation: MOVE, operands: [ ARDISP(A0, dr_disp(D0, 123)), DR(D3) ] }

> move.w 123(a0,d0),d3 
# Instruction { size: 2, operation: MOVE, operands: [ ARDISP(A0, dr_disp(D0, 123)), DR(D3) ] }

> move.l 123(a0,d0),d3 
# Instruction { size: 4, operation: MOVE, operands: [ ARDISP(A0, dr_disp(D0, 123)), DR(D3) ] }

> move.l 123(a0,d0),a1 
# Instruction { size: 4, operation: MOVEA, operands: [ ARDISP(A0, dr_disp(D0, 123)), AR(A1) ] }

> move.w 123(a0,d0),a1 
# Instruction { size: 2, operation: MOVEA, operands: [ ARDISP(A0, dr_disp(D0, 123)), AR(A1) ] }

> move.b #$12,d7 
# Instruction { size: 1, operation: MOVE, operands: [ IMM8(0x12), DR(D7) ] }

> move.w #$1234,d7 
# Instruction { size: 2, operation: MOVE, operands: [ IMM16(0x1234), DR(D7) ] }

> move.l #$12345678,d7 
# Instruction { size: 4, operation: MOVE, operands: [ IMM32(0x12345678), DR(D7) ] }

> move.l D1,-(A2)
# Instruction { size: 4, operation: MOVE, operands: [ DR(D1), ARDEC(A2) ] }

> move.l D1,(A2)+
# Instruction { size: 4, operation: MOVE, operands: [ DR(D1), ARINC(A2) ] }

> move.l -(A4),(A2)+
# Instruction { size: 4, operation: MOVE, operands: [ ARDEC(A4), ARINC(A2) ] }

> move.l 4.w,A0
# Instruction { size: 4, operation: MOVEA, operands: [ ABS16(4), AR(A0) ], }

> move.l $11223344,A0
# Instruction { size: 4, operation: MOVEA, operands: [ ABS32(0x11223344), AR(A0) ], }

> move.w #$1234,123(d0)
# Instruction {
#   size: 2, operation: MOVE, operands: [ 
#     IMM16(0x1234),
#     DISP(Displacement {
#       base_displacement: 123,
#       outer_displacement: 0,
#       indexer: Indexer::DR(D0, 0),
#       indirection: NoIndirection,
#      })
#    ]
#  }

> move.w -8(pc),d3
# Instruction {
#   size: 2, operation: MOVE, operands: [ 
#     PCDISP(Displacement {
#       base_displacement: -8,
#       outer_displacement: 0,
#       indexer: Indexer::NoIndexer,
#       indirection: NoIndirection,
#     }),
#     DR(D3),
#   ]
# }

> move.w -8(pc,d2*8),d3
# Instruction {
#   size: 2, operation: MOVE, operands: [ 
#     PCDISP(Displacement {
#       base_displacement: -8,
#       outer_displacement: 0,
#       indexer: Indexer::DR(D2, 3),
#       indirection: NoIndirection,
#     }),
#     DR(D3),
#   ],
# }

> move.w 123(a1,d2*4),9876(a2,d3*2)
# Instruction {
#   size: 2,
#   operation: MOVE,
#   operands: [
#     ARDISP(A1, dr_disp_scale(D2, 123, 2)),
#     ARDISP(A2, dr_disp_scale(D3, 9876, 1))
#   ]
# }

> move.w d0,12345(a0,a1*2)
# Instruction {
#   size: 2,
#   operation: MOVE,
#   operands: [
#     DR(D0),
#     ARDISP(A0, Displacement {
#       base_displacement: 12345,
#       outer_displacement: 0,
#       indexer: Indexer::AR(A1, 1),
#       indirection: NoIndirection,
#     })
#   ]
# }

> lea (a0),a1
# Instruction { size: 4, operation: LEA, operands: [ ARIND(A0), AR(A1) ] }

> lea 8(a0),a1
# Instruction { size: 4, operation: LEA, operands: [ ARDISP(A0, simple_disp(8)), AR(A1) ] }

> ori #17,ccr
# Instruction { size: 1, operation: ORITOCCR, operands: [ IMM8(17), Implied ] }

> ori #$1234,sr
# Instruction { size: 2, operation: ORITOSR, operands: [ IMM16(0x1234), Implied ] }

> ori.w #$1234,d0
# Instruction { size: 2, operation: ORI, operands: [ IMM16(0x1234), DR(D0) ] }

> ori.b #$12,d2
# Instruction { size: 1, operation: ORI, operands: [ IMM8(0x12), DR(D2) ] }

> ori.w #$1234,123(a0,d0)
# Instruction { size: 2, operation: ORI, operands: [ IMM16(0x1234), ARDISP(A0, dr_disp(D0, 123)) ] }

> ori.l #$12345678,-(a0)
# Instruction { size: 4, operation: ORI, operands: [ IMM32(0x12345678), ARDEC(A0) ] }

> andi #17,ccr
# Instruction { size: 1, operation: ANDITOCCR, operands: [ IMM8(17), Implied ] }

> andi #$1234,sr
# Instruction { size: 2, operation: ANDITOSR, operands: [ IMM16(0x1234), Implied ] }

> andi.w #$1234,d0
# Instruction { size: 2, operation: ANDI, operands: [ IMM16(0x1234), DR(D0) ] }

> andi.b #$12,d2
# Instruction { size: 1, operation: ANDI, operands: [ IMM8(0x12), DR(D2) ] }

> andi.w #$1234,123(a0,d0)
# Instruction { size: 2, operation: ANDI, operands: [ IMM16(0x1234), ARDISP(A0, dr_disp(D0, 123)) ] }

> andi.l #$12345678,-(a0)
# Instruction { size: 4, operation: ANDI, operands: [ IMM32(0x12345678), ARDEC(A0) ] }

> eori #17,ccr
# Instruction { size: 1, operation: EORITOCCR, operands: [ IMM8(17), Implied ] }

> eori #$1234,sr
# Instruction { size: 2, operation: EORITOSR, operands: [ IMM16(0x1234), Implied ] }

> eori.w #$1234,d0
# Instruction { size: 2, operation: EORI, operands: [ IMM16(0x1234), DR(D0) ] }

> eori.b #$12,d2
# Instruction { size: 1, operation: EORI, operands: [ IMM8(0x12), DR(D2) ] }

> eori.w #$1234,123(a0,d0)
# Instruction { size: 2, operation: EORI, operands: [ IMM16(0x1234), ARDISP(A0, dr_disp(D0, 123)) ] }

> eori.l #$12345678,-(a0)
# Instruction { size: 4, operation: EORI, operands: [ IMM32(0x12345678), ARDEC(A0) ] }

> addi.l #$12345678,-(a0)
# Instruction { size: 4, operation: ADDI, operands: [ IMM32(0x12345678), ARDEC(A0) ] }

> subi.l #$12345678,-(a0)
# Instruction { size: 4, operation: SUBI, operands: [ IMM32(0x12345678), ARDEC(A0) ] }

> rtm d3
# Instruction { size: 0, operation: RTM, operands: [ DR(D3), NoOperand ] }

> rtm a1
# Instruction { size: 0, operation: RTM, operands: [ AR(A1), NoOperand ] }

> cmp2.l (a0),d3
# Instruction { size: 4, operation: CMP2, operands: [ ARIND(A0), DR(D3) ] }

> cmp2.b 90(a0,d2),a6
# Instruction { size: 1, operation: CMP2, operands: [ ARDISP(A0, dr_disp(D2, 90)), AR(A6) ] }

> chk2.w 90(a0,d2),a6
# Instruction { size: 2, operation: CHK2, operands: [ ARDISP(A0, dr_disp(D2, 90)), AR(A6) ] }

> cmpi.b #$a5,90(a0,d2*4)
# Instruction { size: 1, operation: CMPI, operands: [ IMM8(0xa5), ARDISP(A0, dr_disp_scale(D2, 90, 2)) ] }

> cmpi.w #$a512,90(a0,d2*4)
# Instruction { size: 2, operation: CMPI, operands: [ IMM16(0xa512), ARDISP(A0, dr_disp_scale(D2, 90, 2)) ] }

> cmpi.l #$12345678,90(a0,d2*4)
# Instruction { size: 4, operation: CMPI, operands: [ IMM32(0x12345678), ARDISP(A0, dr_disp_scale(D2, 90, 2)) ] }

> btst #18,d0
# Instruction { size: 1, operation: BTST, operands: [ IMM16(18), DR(D0) ] }

> btst #18,(a0)+
# Instruction { size: 1, operation: BTST, operands: [ IMM16(18), ARINC(A0) ] }

> bclr #18,(a0)+
# Instruction { size: 1, operation: BCLR, operands: [ IMM16(18), ARINC(A0) ] }

> bchg #18,(a0)+
# Instruction { size: 1, operation: BCHG, operands: [ IMM16(18), ARINC(A0) ] }

> bset #18,(a0)+
# Instruction { size: 1, operation: BSET, operands: [ IMM16(18), ARINC(A0) ] }

> moves.l a0,(a1)
# Instruction { size: 4, operation: MOVES, operands: [ AR(A0), ARIND(A1) ] }

> moves.b d0,(a1)
# Instruction { size: 1, operation: MOVES, operands: [ DR(D0), ARIND(A1) ] }

> cas d0,d1,(a0)
# NotImplemented

> cas2 d0:d1,d2:d3,(a0):(a1)
# NotImplemented
