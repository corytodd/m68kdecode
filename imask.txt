ANDITOCCR       0000_0010_0011_1100 sz=1; src=cs.imm8(); dst=Implied;
ANDITOSR        0000_0010_0111_1100 sz=2; src=cs.imm16(); dst=Implied;
EORITOCCR       0000_1010_0011_1100 sz=1; src=cs.imm8(); dst=Implied;
EORITOSR        0000_1010_0111_1100 sz=2; src=cs.imm16(); dst=Implied;
ORITOCCR        0000_0000_0011_1100 sz=1; src=cs.imm8(); dst=Implied;
ORITOSR         0000_0000_0111_1100 sz=2; src=cs.imm16(); dst=Implied;

RTM             0000_0110_1100_arrr sz=0; src=cs.dar(a,r); dst=NoOperand;

MOVEA           0011_RRR0_01mm_mrrr sz=2; src=cs.ea(r, m, 2); dst=cs.ea(R, 0b001, 2); 
MOVEA           0010_RRR0_01mm_mrrr sz=4; src=cs.ea(r, m, 4); dst=cs.ea(R, 0b001, 4); 

MOVE            0001_RRRM_MMmm_mrrr sz=1; src=cs.ea(r, m, 1); dst=cs.ea(R, M, 1); 
MOVE            0011_RRRM_MMmm_mrrr sz=2; src=cs.ea(r, m, 2); dst=cs.ea(R, M, 2); 
MOVE            0010_RRRM_MMmm_mrrr sz=4; src=cs.ea(r, m, 4); dst=cs.ea(R, M, 4); 

# Note: bit eight being 1 here allows these to be check before all else 
# Note: for movep bits 5-3, specify a mode An, which all the other
# bit 8 set commands do not, so have check first.

MOVEP           0000_ddd1_0s00_1aaa sz=1<<(s+1); src=ARIND(cs.address_reg(a)); dst=cs.data_reg_op(d);
MOVEP           0000_ddd1_0s10_1aaa sz=1<<(s+1); src=DR(cs.data_reg(d)); dst=ARIND(cs.address_reg(a));

BTST            0000_ddd1_00mm_mrrr sz=4; src=cs.data_reg_op(d); dst=cs.ea(r, m, 4);
BCHG            0000_ddd1_01mm_mrrr sz=4; src=cs.data_reg_op(d); dst=cs.ea(r, m, 4);
BCLR            0000_ddd1_10mm_mrrr sz=4; src=cs.data_reg_op(d); dst=cs.ea(r, m, 4);
BSET            0000_ddd1_11mm_mrrr sz=4; src=cs.data_reg_op(d); dst=cs.ea(r, m, 4);

BTST            0000_1000_00mm_mrrr 0000_000n_nnnn_nnnn sz=1; src=IMM16(n); dst=cs.ea(r, m, 1);
BCHG            0000_1000_01mm_mrrr 0000_000n_nnnn_nnnn sz=1; src=IMM16(n); dst=cs.ea(r, m, 1);
BCLR            0000_1000_10mm_mrrr 0000_000n_nnnn_nnnn sz=1; src=IMM16(n); dst=cs.ea(r, m, 1);
BSET            0000_1000_11mm_mrrr 0000_000n_nnnn_nnnn sz=1; src=IMM16(n); dst=cs.ea(r, m, 1);

RTM             0000_0110_1100_drrr sz=0; src=cs.dar(d, r); dst=NoOperand;

CALLM           0000_0110_11mm_mrrr sz=0; src=cs.imm8() ; dst=cs.ea(r, m, 0);

ADDI            0000_0110_00mm_mrrr sz=1; src=cs.imm8() ; dst=cs.ea(r, m, 1);
ADDI            0000_0110_01mm_mrrr sz=2; src=cs.imm16(); dst=cs.ea(r, m, 2);
ADDI            0000_0110_10mm_mrrr sz=4; src=cs.imm32(); dst=cs.ea(r, m, 4);
                                                                          
SUBI            0000_0100_00mm_mrrr sz=1; src=cs.imm8() ; dst=cs.ea(r, m, 1);
SUBI            0000_0100_01mm_mrrr sz=2; src=cs.imm16(); dst=cs.ea(r, m, 2);
SUBI            0000_0100_10mm_mrrr sz=4; src=cs.imm32(); dst=cs.ea(r, m, 4);
                                                                          
ANDI            0000_0010_00mm_mrrr sz=1; src=cs.imm8() ; dst=cs.ea(r, m, 1);
ANDI            0000_0010_01mm_mrrr sz=2; src=cs.imm16(); dst=cs.ea(r, m, 2);
ANDI            0000_0010_10mm_mrrr sz=4; src=cs.imm32(); dst=cs.ea(r, m, 4);
                                                                          
ORI             0000_0000_00mm_mrrr sz=1; src=cs.imm8() ; dst=cs.ea(r, m, 1);
ORI             0000_0000_01mm_mrrr sz=2; src=cs.imm16(); dst=cs.ea(r, m, 2);
ORI             0000_0000_10mm_mrrr sz=4; src=cs.imm32(); dst=cs.ea(r, m, 4);

CMP2            0000_0ss0_11mm_mrrr addd_0000_0000_0000 sz=1 << s; src=cs.ea(r, m, sz); dst=cs.dar(a, d);
CHK2            0000_0ss0_11mm_mrrr addd_1000_0000_0000 sz=1 << s; src=cs.ea(r, m, sz); dst=cs.dar(a, d);

EORI            0000_1010_00mm_mrrr sz=1; src=cs.imm8(); dst=cs.ea(r, m, 1);
EORI            0000_1010_01mm_mrrr sz=2; src=cs.imm16(); dst=cs.ea(r, m, 2);
EORI            0000_1010_10mm_mrrr sz=4; src=cs.imm32(); dst=cs.ea(r, m, 4);

CMPI            0000_1100_00mm_mrrr sz=1; src=cs.imm8(); dst=cs.ea(r, m, 1);
CMPI            0000_1100_01mm_mrrr sz=2; src=cs.imm16(); dst=cs.ea(r, m, 2);
CMPI            0000_1100_10mm_mrrr sz=4; src=cs.imm32(); dst=cs.ea(r, m, 4);

MOVES           0000_1110_00mm_mrrr addd_0000_0000_0000 sz=1; dst=cs.dar(a, d); src=cs.ea(r, m, 1);
MOVES           0000_1110_01mm_mrrr addd_0000_0000_0000 sz=2; dst=cs.dar(a, d); src=cs.ea(r, m, 2);
MOVES           0000_1110_10mm_mrrr addd_0000_0000_0000 sz=4; dst=cs.dar(a, d); src=cs.ea(r, m, 4);

MOVES           0000_1110_00mm_mrrr addd_1000_0000_0000 sz=1; src=cs.dar(a, d); dst=cs.ea(r, m, 1);
MOVES           0000_1110_01mm_mrrr addd_1000_0000_0000 sz=2; src=cs.dar(a, d); dst=cs.ea(r, m, 2);
MOVES           0000_1110_10mm_mrrr addd_1000_0000_0000 sz=4; src=cs.dar(a, d); dst=cs.ea(r, m, 4);

#define CAS2_MASK ENCW(1,1,1,1, 1,1,0,1, 1,1,1,1, 1,1,1,1)
#define CAS2_INST ENCW(0,0,0,0, 1,1,0,0, 1,1,1,1, 1,1,0,0)

#CAS2            0000_11s0_1111_1100 Aaaa_000b_bb00_0ccc Dddd_000e_ee00_0fff return special_cas2(s << 1, A, a, b, c, D, d, e, f)

#/*
# * Group misc. (0100)
# */     

BGND            0100_1010_1111_1010 sz=0; src=NoOperand; dst=NoOperand;
ILLEGAL         0100_1010_1111_1100 sz=0; src=NoOperand; dst=NoOperand;

NOP             0100_1110_0111_0001 sz=0; src=NoOperand; dst=NoOperand;
RESET           0100_1110_0111_0000 sz=0; src=NoOperand; dst=NoOperand;
RTD             0100_1110_0111_0100 sz=0; src=cs.imm16(); dst=NoOperand;
RTE             0100_1110_0111_0011 sz=0; src=NoOperand; dst=NoOperand;
RTR             0100_1110_0111_0111 sz=0; src=NoOperand; dst=NoOperand;
RTS             0100_1110_0111_0101 sz=0; src=NoOperand; dst=NoOperand;
STOP            0100_1110_0111_0010 sz=0; src=cs.imm16(); dst=NoOperand;
TRAPV           0100_1110_0111_0110 sz=0; src=NoOperand; dst=NoOperand;

#define MOVEFRC_MASK  0xffff
#define MOVETOC_MASK  0xffff

SWAP            0100_1000_0100_0rrr sz=0; src=cs.data_reg_op(r); dst=NoOperand;
BKPT            0100_1000_0100_1nnn sz=0; src=IMM8(n as u8); dst=NoOperand;

EXTW            0100_1000_1000_0rrr sz=2; src=cs.data_reg_op(r); dst=NoOperand;
EXTL            0100_1000_1100_0rrr sz=4; src=cs.data_reg_op(r); dst=NoOperand;
EXTBL           0100_1001_1100_0rrr sz=4; src=cs.data_reg_op(r); dst=NoOperand;

LEA             0100_nnn1_11mm_mrrr sz=4; src=cs.ea(r, m, 4); dst=cs.address_reg_op(n);

#define EXTBW_MASK  ENCW(1,1,1,1, 1,1,1,1, 1,1,1,1, 1,0,0,0)
#define EXTBW_INST  

#define EXTWL_MASK  ENCW(1,1,1,1, 1,1,1,1, 1,1,1,1, 1,0,0,0)
#define EXTBL_MASK  ENCW(1,1,1,1, 1,1,1,1, 1,1,1,1, 1,0,0,0)

#define LINKW_MASK  ENCW(1,1,1,1, 1,1,1,1, 1,1,1,1, 1,0,0,0)
#define LINKL_MASK  ENCW(1,1,1,1, 1,1,1,1, 1,1,1,1, 1,0,0,0)
#define MOVEFRUSP_MASK  ENCW(1,1,1,1, 1,1,1,1, 1,1,1,1, 1,0,0,0)
#define MOVETOUSP_MASK  ENCW(1,1,1,1, 1,1,1,1, 1,1,1,1, 1,0,0,0)
#define UNLK_MASK ENCW(1,1,1,1, 1,1,1,1, 1,1,1,1, 1,0,0,0)
#define EXTWL_INST  ENCW(0,1,0,0, 1,0,0,0, 1,1,0,0, 0,0,0,0)
#define EXTBL_INST  ENCW(0,1,0,0, 1,0,0,1, 1,1,0,0, 0,0,0,0)
#define LINKW_INST  ENCW(0,1,0,0, 1,1,1,0, 0,1,0,1, 0,0,0,0)
#define LINKL_INST  ENCW(0,1,0,0, 1,0,0,0, 0,0,0,0, 1,0,0,0)
#define MOVETOUSP_INST  ENCW(0,1,0,0, 1,1,1,0, 0,1,1,0, 0,0,0,0)
#define MOVEFRUSP_INST  ENCW(0,1,0,0, 1,1,1,0, 0,1,1,0, 1,0,0,0)
#define UNLK_INST ENCW(0,1,0,0, 1,1,1,0, 0,1,0,1, 1,0,0,0)

#define TRAP_MASK ENCW(1,1,1,1, 1,1,1,1, 1,1,1,1, 0,0,0,0)
#define TRAP_INST ENCW(0,1,0,0, 1,1,1,0, 0,1,0,0, 0,0,0,0)
                                                    
#define DIVSL_MASK  ENCW(1,1,1,1, 1,1,1,1, 1,1,0,0, 0,0,0,0)
#define DIVUL_MASK  ENCW(1,1,1,1, 1,1,1,1, 1,1,0,0, 0,0,0,0)
#define JMP_MASK  ENCW(1,1,1,1, 1,1,1,1, 1,1,0,0, 0,0,0,0)
#define JSR_MASK  ENCW(1,1,1,1, 1,1,1,1, 1,1,0,0, 0,0,0,0)
#define MOVEFRCCR_MASK  ENCW(1,1,1,1, 1,1,1,1, 1,1,0,0, 0,0,0,0)
#define MOVETOCCR_MASK  ENCW(1,1,1,1, 1,1,1,1, 1,1,0,0, 0,0,0,0)
#define MOVEFRSR_MASK ENCW(1,1,1,1, 1,1,1,1, 1,1,0,0, 0,0,0,0)
#define MOVETOSR_MASK ENCW(1,1,1,1, 1,1,1,1, 1,1,0,0, 0,0,0,0)
#define MULSL_MASK  ENCW(1,1,1,1, 1,1,1,1, 1,1,0,0, 0,0,0,0)
#define MULUL_MASK  ENCW(1,1,1,1, 1,1,1,1, 1,1,0,0, 0,0,0,0)
#define NBCD_MASK ENCW(1,1,1,1, 1,1,1,1, 1,1,0,0, 0,0,0,0)
#define PEA_MASK  ENCW(1,1,1,1, 1,1,1,1, 1,1,0,0, 0,0,0,0)
#define TAS_MASK  ENCW(1,1,1,1, 1,1,1,1, 1,1,0,0, 0,0,0,0)
#define DIVSL_INST  ENCW(0,1,0,0, 1,1,0,0, 0,1,0,0, 0,0,0,0)
#define DIVUL_INST  DIVSL_INST
#define JMP_INST  ENCW(0,1,0,0, 1,1,1,0, 1,1,0,0, 0,0,0,0)
#define JSR_INST  ENCW(0,1,0,0, 1,1,1,0, 1,0,0,0, 0,0,0,0)
#define MOVEFRCCR_INST  ENCW(0,1,0,0, 0,0,1,0, 1,1,0,0, 0,0,0,0)
#define MOVETOCCR_INST  ENCW(0,1,0,0, 0,1,0,0, 1,1,0,0, 0,0,0,0)
#define MOVEFRSR_INST ENCW(0,1,0,0, 0,0,0,0, 1,1,0,0, 0,0,0,0)
#define MOVETOSR_INST ENCW(0,1,0,0, 0,1,1,0, 1,1,0,0, 0,0,0,0)
#define MULSL_INST  ENCW(0,1,0,0, 1,1,0,0, 0,0,0,0, 0,0,0,0)
#define MULUL_INST  MULSL_INST
#define NBCD_INST ENCW(0,1,0,0, 1,0,0,0, 0,0,0,0, 0,0,0,0)
#define PEA_INST  ENCW(0,1,0,0, 1,0,0,0, 0,1,0,0, 0,0,0,0)
#define TAS_INST  ENCW(0,1,0,0, 1,0,1,0, 1,1,0,0, 0,0,0,0)

#define MOVEM_MASK  ENCW(1,1,1,1, 1,0,1,1, 1,0,0,0, 0,0,0,0)
#define MOVEM_INST  ENCW(0,1,0,0, 1,0,0,0, 1,0,0,0, 0,0,0,0)

#define CLR_MASK  ENCW(1,1,1,1, 1,1,1,1, 0,0,0,0, 0,0,0,0)
#define NEG_MASK  ENCW(1,1,1,1, 1,1,1,1, 0,0,0,0, 0,0,0,0)
#define NEGX_MASK ENCW(1,1,1,1, 1,1,1,1, 0,0,0,0, 0,0,0,0)
#define NOT_MASK  ENCW(1,1,1,1, 1,1,1,1, 0,0,0,0, 0,0,0,0)
#define TST_MASK  ENCW(1,1,1,1, 1,1,1,1, 0,0,0,0, 0,0,0,0)
#define CLR_INST  ENCW(0,1,0,0, 0,0,1,0, 0,0,0,0, 0,0,0,0)
#define NEG_INST  ENCW(0,1,0,0, 0,1,0,0, 0,0,0,0, 0,0,0,0)
#define NEGX_INST ENCW(0,1,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0)
#define NOT_INST  ENCW(0,1,0,0, 0,1,1,0, 0,0,0,0, 0,0,0,0)
#  /* Note: very similatr to MOVEM but bit 9 differentiates. */
#define TST_INST  ENCW(0,1,0,0, 1,0,1,0, 0,0,0,0, 0,0,0,0)

#define LEA_MASK  ENCW(1,1,1,1, 0,0,0,1, 1,1,0,0, 0,0,0,0)
#define LEA_INST  ENCW(0,1,0,0, 0,0,0,1, 1,1,0,0, 0,0,0,0)
#define CHK_MASK  ENCW(1,1,1,1, 0,0,0,1, 0,1,0,0, 0,0,0,0)
#define CHK_INST  ENCW(0,1,0,0, 0,0,0,1, 0,0,0,0, 0,0,0,0)

#/*
# * Group bitfield/Shift/Rotate. (1110)
# */
#define BFCHG_MASK  ENCW(1,1,1,1, 1,1,1,1, 1,1,0,0, 0,0,0,0)
#define BFCLR_MASK  ENCW(1,1,1,1, 1,1,1,1, 1,1,0,0, 0,0,0,0)
#define BFEXTS_MASK ENCW(1,1,1,1, 1,1,1,1, 1,1,0,0, 0,0,0,0)
#define BFEXTU_MASK ENCW(1,1,1,1, 1,1,1,1, 1,1,0,0, 0,0,0,0)
#define BFFFO_MASK  ENCW(1,1,1,1, 1,1,1,1, 1,1,0,0, 0,0,0,0)
#define BFINS_MASK  ENCW(1,1,1,1, 1,1,1,1, 1,1,0,0, 0,0,0,0)
#define BFSET_MASK  ENCW(1,1,1,1, 1,1,1,1, 1,1,0,0, 0,0,0,0)
#define BFTST_MASK  ENCW(1,1,1,1, 1,1,1,1, 1,1,0,0, 0,0,0,0)

#define BFCHG_INST  ENCW(1,1,1,0, 1,0,1,0, 1,1,0,0, 0,0,0,0)
#define BFCLR_INST  ENCW(1,1,1,0, 1,1,0,0, 1,1,0,0, 0,0,0,0)
#define BFEXTS_INST ENCW(1,1,1,0, 1,0,1,1, 1,1,0,0, 0,0,0,0)
#define BFEXTU_INST ENCW(1,1,1,0, 1,0,0,1, 1,1,0,0, 0,0,0,0)
#define BFFFO_INST  ENCW(1,1,1,0, 1,1,0,1, 1,1,0,0, 0,0,0,0)
#define BFINS_INST  ENCW(1,1,1,0, 1,1,1,1, 1,1,0,0, 0,0,0,0)
#define BFSET_INST  ENCW(1,1,1,0, 1,1,1,0, 1,1,0,0, 0,0,0,0)
#define BFTST_INST  ENCW(1,1,1,0, 1,0,0,0, 1,1,0,0, 0,0,0,0)

##define AS_TYPE   0x0
##define LS_TYPE   0x1
##define RO_TYPE   0x3
##define ROX_TYPE  0x2

#/*
# * Group DBcc/TRAPcc/ADDQ/SUBQ (0101)
# */
#define DBcc_MASK ENCW(1,1,1,1, 0,0,0,0, 1,1,1,1, 1,0,0,0)
#define TRAPcc_MASK ENCW(1,1,1,1, 0,0,0,0, 1,1,1,1, 1,0,0,0)
#define Scc_MASK  ENCW(1,1,1,1, 0,0,0,0, 1,1,0,0, 0,0,0,0)
#define ADDQ_MASK ENCW(1,1,1,1, 0,0,0,1, 0,0,0,0, 0,0,0,0)
#define SUBQ_MASK ENCW(1,1,1,1, 0,0,0,1, 0,0,0,0, 0,0,0,0)
#define DBcc_INST ENCW(0,1,0,1, 0,0,0,0, 1,1,0,0, 1,0,0,0)
#define TRAPcc_INST ENCW(0,1,0,1, 0,0,0,0, 1,1,1,1, 1,0,0,0)
#define Scc_INST  ENCW(0,1,0,1, 0,0,0,0, 1,1,0,0, 0,0,0,0)
#define ADDQ_INST ENCW(0,1,0,1, 0,0,0,0, 0,0,0,0, 0,0,0,0)
#define SUBQ_INST ENCW(0,1,0,1, 0,0,0,1, 0,0,0,0, 0,0,0,0)

#/*
# * Group ADD/ADDX (1101)
# */
#define ADDX_MASK ENCW(1,1,1,1, 0,0,0,1, 0,0,1,1, 0,0,0,0)
#define ADDX_INST ENCW(1,1,0,1, 0,0,0,1, 0,0,0,0, 0,0,0,0)
#define ADD_MASK  ENCW(1,1,1,1, 0,0,0,0, 0,0,0,0, 0,0,0,0)
#define ADD_INST  ENCW(1,1,0,1, 0,0,0,0, 0,0,0,0, 0,0,0,0)

#/*
# * Group SUB/SUBX (1001)
# */
#define SUBX_MASK ENCW(1,1,1,1, 0,0,0,1, 0,0,1,1, 0,0,0,0)
#define SUBX_INST ENCW(1,0,0,1, 0,0,0,1, 0,0,0,0, 0,0,0,0)
#define SUB_MASK  ENCW(1,1,1,1, 0,0,0,0, 0,0,0,0, 0,0,0,0)
#define SUB_INST  ENCW(1,0,0,1, 0,0,0,0, 0,0,0,0, 0,0,0,0)

#/*
# * Group CMP/CMPA/EOR (1011)
# */
#define CMPA_MASK ENCW(1,1,1,1, 0,0,0,0, 1,1,0,0, 0,0,0,0)
#define CMPA_INST ENCW(1,0,1,1, 0,0,0,0, 1,1,0,0, 0,0,0,0)

#define CMP_MASK  ENCW(1,1,1,1, 0,0,0,1, 0,0,0,0, 0,0,0,0)
#define CMP_INST  ENCW(1,0,1,1, 0,0,0,0, 0,0,0,0, 0,0,0,0)

#define CMPM_MASK ENCW(1,1,1,1, 0,0,0,1, 0,0,1,1, 1,0,0,0)
#define CMPM_INST ENCW(1,0,1,1, 0,0,0,1, 0,0,0,0, 1,0,0,0)

#define EOR_MASK  ENCW(1,1,1,1, 0,0,0,1, 0,0,0,0, 0,0,0,0)
#define EOR_INST  ENCW(1,0,1,1, 0,0,0,1, 0,0,0,0, 0,0,0,0)

#/*
# * Group branch. (0110)
# */
#define BRA_MASK  ENCW(1,1,1,1, 1,1,1,1, 0,0,0,0, 0,0,0,0)
#define BSR_MASK  ENCW(1,1,1,1, 1,1,1,1, 0,0,0,0, 0,0,0,0)
#define Bcc_MASK  ENCW(1,1,1,1, 0,0,0,0, 0,0,0,0, 0,0,0,0)
#define BRA_INST  ENCW(0,1,1,0, 0,0,0,0, 0,0,0,0, 0,0,0,0)
#define BSR_INST  ENCW(0,1,1,0, 0,0,0,1, 0,0,0,0, 0,0,0,0)
#define Bcc_INST  ENCW(0,1,1,0, 0,0,0,0, 0,0,0,0, 0,0,0,0)


#/*
# * Group SBCD/DIVx/OR (1000)
# */

#define PACKA_MASK  ENCW(1,1,1,1, 0,0,0,1, 1,1,1,1, 1,0,0,0)
#define PACKD_MASK  ENCW(1,1,1,1, 0,0,0,1, 1,1,1,1, 1,0,0,0)
#define PACKA_INST  ENCW(1,0,0,0, 0,0,0,1, 0,1,0,0, 1,0,0,0)
#define PACKD_INST  ENCW(1,0,0,0, 0,0,0,1, 0,1,0,0, 0,0,0,0)
#define UNPKA_MASK  ENCW(1,1,1,1, 0,0,0,1, 1,1,1,1, 1,0,0,0)
#define UNPKD_MASK  ENCW(1,1,1,1, 0,0,0,1, 1,1,1,1, 1,0,0,0)
#define UNPKA_INST  ENCW(1,0,0,0, 0,0,0,1, 1,0,0,0, 1,0,0,0)
#define UNPKD_INST  ENCW(1,0,0,0, 0,0,0,1, 1,0,0,0, 0,0,0,0)
#define SBCDA_MASK  ENCW(1,1,1,1, 0,0,0,1, 1,1,1,1, 1,0,0,0)
#define SBCDD_MASK  ENCW(1,1,1,1, 0,0,0,1, 1,1,1,1, 1,0,0,0)
#define SBCDA_INST  ENCW(1,0,0,0, 0,0,0,1, 0,0,0,0, 1,0,0,0)
#define SBCDD_INST  ENCW(1,0,0,0, 0,0,0,1, 0,0,0,0, 0,0,0,0)

#define DIVSW_MASK  ENCW(1,1,1,1, 0,0,0,1, 1,1,0,0, 0,0,0,0)
#define DIVUW_MASK  ENCW(1,1,1,1, 0,0,0,1, 1,1,0,0, 0,0,0,0)
#define DIVSW_INST  ENCW(1,0,0,0, 0,0,0,1, 1,1,0,0, 0,0,0,0)
#define DIVUW_INST  ENCW(1,0,0,0, 0,0,0,0, 1,1,0,0, 0,0,0,0)

#define OR_MASK   ENCW(1,1,1,1, 0,0,0,0, 0,0,0,0, 0,0,0,0)
#define OR_INST   ENCW(1,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0)

#/*
# * Group AND/MUL/ABCD/EXG (1100)
# */
#define ABCDA_MASK  ENCW(1,1,1,1, 0,0,0,1, 1,1,1,1, 1,0,0,0)
#define ABCDD_MASK  ENCW(1,1,1,1, 0,0,0,1, 1,1,1,1, 1,0,0,0)
#define ABCDA_INST  ENCW(1,1,0,0, 0,0,0,1, 0,0,0,0, 1,0,0,0)
#define ABCDD_INST  ENCW(1,1,0,0, 0,0,0,1, 0,0,0,0, 0,0,0,0)
  
#define MULSW_MASK  ENCW(1,1,1,1, 0,0,0,1, 1,1,0,0, 0,0,0,0)
#define MULUW_MASK  ENCW(1,1,1,1, 0,0,0,1, 1,1,0,0, 0,0,0,0)
#define MULSW_INST  ENCW(1,1,0,0, 0,0,0,1, 1,1,0,0, 0,0,0,0)
#define MULUW_INST  ENCW(1,1,0,0, 0,0,0,0, 1,1,0,0, 0,0,0,0)

#define EXG_MASK  ENCW(1,1,1,1, 0,0,0,1, 0,0,1,1, 0,0,0,0)
#define EXG_INST  ENCW(1,1,0,0, 0,0,0,1, 0,0,0,0, 0,0,0,0)  

#define AND_MASK  ENCW(1,1,1,1, 0,0,0,0, 0,0,0,0, 0,0,0,0)
#define AND_INST  ENCW(1,1,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0)

#define ENCFT(b5,b4,b3,b2,b1,b0) ENCB(0,0,b5,b4,b3,b2,b1,b0)

#define FABS  ENCFT(0,1,1,0,0,0)
#define FACOS ENCFT(0,1,1,1,0,0)
#define FADD  ENCFT(1,0,0,0,1,0)
#define FASIN ENCFT(0,0,1,1,0,0)
#define FATAN ENCFT(0,0,1,0,1,0)
#define FATANH  ENCFT(0,0,1,1,0,1)
#define FCMP  ENCFT(1,1,1,0,0,0)
#define FCOS  ENCFT(0,1,1,1,0,1)
#define FCOSH ENCFT(0,1,1,0,0,1)
#define FDIV  ENCFT(1,0,0,0,0,0)
#define FETOX ENCFT(0,1,0,0,0,0)
#define FETOXM1 ENCFT(0,0,1,0,0,0)
#define FGETEXP ENCFT(0,1,1,1,1,0)
#define FGETMAN ENCFT(0,1,1,1,1,1)
#define FINT  ENCFT(0,0,0,0,0,1)
#define FINTRZ  ENCFT(0,0,0,0,1,1)
#define FLOG10  ENCFT(0,1,0,1,0,1)
#define FLOG2 ENCFT(0,1,0,1,1,0)
#define FLOGN ENCFT(0,1,0,1,0,0)
#define FLOGNP1 ENCFT(0,0,0,1,1,0)
#define FMOD  ENCFT(1,0,0,0,0,1)
#define FMOVE ENCFT(0,0,0,0,0,0)
#define FMUL  ENCFT(1,0,0,0,1,1)
#define FNEG  ENCFT(0,1,1,0,1,0)
#define FREM  ENCFT(1,0,0,1,0,1)
#undef FSCALE
#define FSCALE  ENCFT(1,0,0,1,1,0)
#define FSGLDIV ENCFT(1,0,0,1,0,0)
#define FSGLMUL ENCFT(1,0,0,1,1,1)
#define FSIN  ENCFT(0,0,1,1,1,0)
#define FSINH ENCFT(0,0,0,0,1,0)
#define FSQRT ENCFT(0,0,0,1,0,0)
#define FSUB  ENCFT(1,0,1,0,0,0)
#define FTAN  ENCFT(0,0,1,1,1,1)
#define FTANH ENCFT(0,0,1,0,0,1)
#define FTENTOX ENCFT(0,1,0,0,1,0)
#define FTST  ENCFT(1,1,1,0,1,0)
#define FTWOTOX ENCFT(0,1,0,0,0,1)

